# The system name that uniquely identifies the jig
title: Edit Contact
# Description of the jig. This is not a required field and can be omitted.
description: Use this jig to quickly and securely edit and save a contact to Dynamic Data.
# The jig type used to display data
type: jig.default

header:
  type: component.jig-header
  options:
    height: small
    children:
      type: component.image
      options:
        source:
          uri: https://builder.jigx.com/assets/images/captureinfo.jpg

# The top level action on a default jig places a button at the bottom of the screen    
actions:
  - children:
      # This action saves the data from the input fields to the SQLite database. 
      # The execute entity action will use data from the controls on the jig and update 
      # an existing record in the local SQLite table.
      - type: action.execute-entity
        options:
          # The data provider being used. In this case, the Jigx Dynamic Data provider, which is a 
          # built-in database using methods to work with the data. 
          provider: DATA_PROVIDER_DYNAMIC
          # The title of the button.
          title: Update Contact
          # The name of the table that the information is being saved to. 
          # All Dynamic Data-based tables are saved in the "default" database.
          entity: default/contacts
          # The Jigx Dynamic Data provider method to update the data.
          method: update
          # The navigation action that is performed after the execute entity action completes.
          goBack: previous
          # Data properties for the JSON object.
          data: 
            # The unique instanceids can be used to access the state of the control.
            # Required id parameter is passed to know which record to update
            id: =@ctx.datasources.contactData.id
            firstName: =@ctx.components.firstName.state.value
            lastName: =@ctx.components.lastName.state.value
            jobTitle: =@ctx.components.jobTitle.state.value
            companyName: =@ctx.components.companyName.state.value
            phone: =@ctx.components.phone.state.value
            email: =@ctx.components.email.state.value
          # An action that only occurs upon successful completion.
          onSuccess:
            # You can use the title for the modal window after the action completes successfully. Or you can try some action.
            title: Your contact was successfully updated.

# The type of datasource used to store the edited data in the jig
datasources:
  contactData: 
    type: datasource.sqlite
    options:
      isDocument: true
      # The data provider being used. In this case, the Jigx Dynamic Data provider, which is a built-in
      # database using methods to work with the data. 
      provider: DATA_PROVIDER_DYNAMIC
      # The name of the table that the information is being returned from. 
      # All Dynamic Data-based tables are defined in "default.jigx" under databases.
      entities:
        - default/contacts
      query: |
        SELECT 
          id,
          '$.firstName',
          '$.lastName',
          '$.jobTitle',
          '$.companyName',
          '$.phone',
          '$.email' 
        FROM 
          [default/contacts]
        WHERE
          id = @contactId
      # Parameters are used to filter data from the query
      queryParameters:
        # Different inputs can be used to specify the parameter values. 
        # In this example we used the jig input received from the list jig to filter the query.
        contactId: =@ctx.jig.inputs.contact.id

# The controls that will be displayed on the jig are defined under the children node on a default jig.  
children:
    # All input controls are placed on a form component.
  - type: component.form
    # A form is uniquely identified by its instance id.
    instanceId: contactInfo
    options:
      children:
        # To display two controls next to each other, they are added as children of a field-row component.
        - type: component.field-row
          options:
            children:
              # A text-field component captures or updates text information on a form.
              # In this case the value is returned from the database.
              - type: component.text-field
                # A control is uniquely identified by its instance id.
                instanceId: firstName
                options:
                  label: First Name
                  # This allows you to set an initial value when the form loads. 
                  initialValue: =@ctx.datasources.contactData.firstName
              - type: component.text-field
                instanceId: lastName
                options:
                  label: Last Name
                  initialValue: =@ctx.datasources.contactData.lastName
        - type: component.text-field
          instanceId: jobTitle
          options:
            label: Title
            initialValue: =@ctx.datasources.contactData.jobTitle
        - type: component.text-field
          instanceId: companyName
          options:
            label: Company
            initialValue: =@ctx.datasources.contactData.companyName
        - type: component.text-field
          instanceId: phone
          options:
            label: Phone
            initialValue: =@ctx.datasources.contactData.phone
            icon: phone
        # An email-field component captures or updates email information on a form.
        # Validation is performed to ensure that runtime input adheres to email formatting.
        - type: component.email-field
          instanceId: email
          options:
            label: Email
            initialValue: =@ctx.datasources.contactData.email
            icon: email

